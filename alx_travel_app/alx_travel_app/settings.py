"""
Django settings for alx_travel_app project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# This file contains the settings for the Django project.
# It includes configurations for database, middleware, installed apps, and other settings.

import datetime
import os

import environ
from pathlib import Path

# import rabbitmq

# Read .env file, but don't fail if it doesn't exist
# environ.Env.read_env(Path(__file__).resolve().parent / ".env")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent

# Set the project base directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Initialize environment variables
env = environ.Env(
    # Set default values
    DEBUG=(bool, True),
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "debug_toolbar",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "listings",
    "celery",
    # "kombu.transport.django",
    # "django_celery_beat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "alx_travel_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "alx_travel_app.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use SQLite by default, but allow overriding with MySQL via environment variables
use_mysql = env.bool("USE_MYSQL", default=False)

if use_mysql:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": env.str("MYSQL_DATABASE_NAME"),
            "USER": env.str("MYSQL_DATABASE_USER"),
            "PASSWORD": env.str("MYSQL_DATABASE_PASSWORD"),
            "HOST": env.str("MYSQL_DATABASE_HOST"),
            "PORT": env.str("MYSQL_DATABASE_PORT"),
        }
    }
else:
    # Use SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Internal IPs for debug toolbar
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]


# Authentication settings
AUTH_USER_MODEL = "listings.User"

# REST framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# CORS settings
CORS_ALLOWED_ORIGINS = env.list(
    "CORS_ALLOWED_ORIGINS", default=["http://localhost:3000"]
)
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_HEADERS = env.list("CORS_ALLOW_HEADERS", default=["*"])
# CORS_ALLOW_METHODS = env.list("CORS_ALLOW_METHODS", default=["GET", "POST", "PUT", "PATCH", "DELETE"])
# CORS_ALLOW_ALL_ORIGINS = True
# CSRF settings
CSRF_TRUSTED_ORIGINS = env.list(
    "CSRF_TRUSTED_ORIGINS", default=["http://localhost:3000"]
)
# CSRF_COOKIE_SECURE = True
# CSRF_COOKIE_HTTPONLY = True
# CSRF_COOKIE_SAMESITE = "Lax"


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(
        minutes=env.int("JWT_ACCESS_TOKEN_LIFETIME_MINUTES", default=5)
    ),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(
        days=env.int("JWT_REFRESH_TOKEN_LIFETIME_DAYS", default=1)
    ),
    "ROTATE_REFRESH_TOKENS": env.bool("JWT_ROTATE_REFRESH_TOKENS", default=False),
    "BLACKLIST_AFTER_ROTATION": env.bool("JWT_BLACKLIST_AFTER_ROTATION", default=False),
    "UPDATE_LAST_LOGIN": env.bool("JWT_UPDATE_LAST_LOGIN", default=False),
    "ALGORITHM": env("JWT_ALGORITHM", default="HS256"),
    "SIGNING_KEY": env("JWT_SIGNING_KEY", default=SECRET_KEY),
    "VERIFYING_KEY": env("JWT_VERIFYING_KEY", default=""),
    "AUDIENCE": env("JWT_AUDIENCE", default=None),
    "ISSUER": env("JWT_ISSUER", default=None),
    "JSON_ENCODER": env("JWT_JSON_ENCODER", default=None),
    "JWK_URL": env("JWT_JWK_URL", default=None),
    "LEEWAY": env.int("JWT_LEEWAY", default=0),
    "AUTH_HEADER_TYPES": env.list("JWT_AUTH_HEADER_TYPES", default=["Bearer"]),
    "AUTH_HEADER_NAME": env("JWT_AUTH_HEADER_NAME", default="HTTP_AUTHORIZATION"),
    "USER_ID_FIELD": env("JWT_USER_ID_FIELD", default="user_id"),
    "USER_ID_CLAIM": env("JWT_USER_ID_CLAIM", default="user_id"),
    "USER_AUTHENTICATION_RULE": env(
        "JWT_USER_AUTHENTICATION_RULE",
        default="rest_framework_simplejwt.authentication.default_user_authentication_rule",
    ),
}


# add rabbitmq as broker for Celery
CELERY_BROKER_URL = env.str(
    "CELERY_BROKER_URL", default="amqp://guest:guest@localhost:5672/"
)
CELERY_RESULT_BACKEND = env.str("CELERY_RESULT_BACKEND", default="rpc://")
